{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SACA,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,YAEpBA,MAGP,IAAMQ,EAAUC,SAASC,cAAc,SAEvCF,EAAQG,iBAAiB,UAAU,SAAAC,GACjC,IAAMC,EAAaC,SAASN,EAAQO,SAASf,MAAMgB,OAC7CC,EAAYH,SAASN,EAAQO,SAASG,KAAKF,OAC3CG,EAAcL,SAASN,EAAQO,SAASK,OAAOJ,OAErDJ,EAAES,iBAIJ,SAAwBD,EAAQpB,EAAOkB,GACrC,IAAK,IAAII,EAAI,EAAGA,EAAIF,EAAQE,IAC1BxB,EAAcwB,EAAI,EAAGtB,EAAQkB,EAAOI,GACjCC,MAAK,SAAAC,G,IAAGzB,EAAQyB,EAARzB,SAAU0B,EAAKD,EAALxB,MACjB0B,EAAA9B,GAAS+B,OAAOC,QAAQ,uBAAwCC,OAAf9B,EAAS,QAAY8B,OAANJ,EAAM,UAEvEK,OAAM,SAAAN,G,IAAGzB,EAAQyB,EAARzB,SAAU0B,EAAKD,EAALxB,MAClB0B,EAAA9B,GAAS+B,OAAOI,QAAQ,sBAAuCF,OAAf9B,EAAS,QAAY8B,OAANJ,EAAM,UAEzEjB,EAAQwB,QAZVC,CAAed,EAAaN,EAAYI,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\nconst formRef = document.querySelector('.form');\n\nformRef.addEventListener('submit', e => {\n  const delayValue = parseInt(formRef.elements.delay.value);\n  const stepValue = parseInt(formRef.elements.step.value);\n  const amountValue = parseInt(formRef.elements.amount.value);\n\n  e.preventDefault();\n  createPromises(amountValue, delayValue, stepValue);\n});\n\nfunction createPromises(amount, delay, step) {\n  for (let i = 0; i < amount; i++) {\n    createPromise(i + 1, delay + step * i)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    formRef.reset()\n  }}\n\n// function createPromise(position, delay) {\n//   return new Promise((resolve, reject) => {\n//     const shouldResolve = Math.random() > 0.3;\n//     setTimeout(() => {\n//       if (shouldResolve) {\n//         resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//       } else {\n//         reject(`❌ Rejected promise ${position} in ${delay}ms`);\n//       }\n//     }, delay);\n//   });\n// }\n\n// const formEl = document.querySelector('.form');\n// formEl.addEventListener('submit', onFormClick);\n\n// function onFormClick(event) {\n//   event.preventDefault();\n//   let delayV = Number(event.target.delay.value);\n//   let amountV = Number(event.target.amount.value);\n//   let stepV = Number(event.target.step.value);\n//   if (delayV < 0 || amountV < 0 || stepV < 0) {\n//     return Notiflix.Notify.info('Dial the correct number');\n//   }\n//   const dataPromise = [];\n//   for (let positionV = 1; positionV <= amountV; positionV += 1) {\n//     dataPromise.push({ position: positionV, delay: delayV });\n//     delayV += stepV;\n//   }\n\n//   dataPromise.forEach(item => {\n//     createPromise(item.position, item.delay)\n//       .then(() => {\n//         Notiflix.Notify.success(\n//           `✅ Fulfilled promise ${item.position} in ${item.delay}ms`,\n//           {\n//             useIcon: false,\n//             timeout: 5000,\n//           }\n//         );\n//       })\n//       .catch(() => {\n//         Notiflix.Notify.failure(\n//           `❌ Rejected promise ${item.position} in ${item.delay}ms`,\n//           {\n//             useIcon: false,\n//             timeout: 5000,\n//           }\n//         );\n//       });\n//     formEl.reset();\n//   });\n// }\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","$ce04d3a99e08e73b$var$formRef","document","querySelector","addEventListener","e","delayValue","parseInt","elements","value","stepValue","step","amountValue","amount","preventDefault","i","then","param","_$delay","$parcel$interopDefault","Notify","success","concat","catch","failure","reset","$ce04d3a99e08e73b$var$createPromises"],"version":3,"file":"03-promises.6b4b0748.js.map"}